{"version":3,"sources":["components/Nav.js","components/Question.js","components/AnswerPane.js","components/ProgressBar.js","components/Tracker.js","components/GamePane.js","components/Footer.js","components/Loader.js","components/GameModal.js","components/Problem.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","onClick","name","Question","timerContent","hasTimer","paddedString","String","Math","ceil","timeRemaining","padStart","timerClassExpr","questionNumber","questionPrompt","defaultProps","AnswerPane","handleOptionChosen","bind","wasCorrect","this","onAnswer","choiceList","map","value","index","key","choiceIDs","choice","isCorrect","correctIndex","shouldReveal","answered","onChosen","React","Component","AnswerChoice","state","chosen","handleClick","setState","classExpr","ProgressBar","fillRef","createRef","ref","fillNode","current","completion","allotedTime","toFixed","setAttribute","Tracker","activeItemRef","trackerRef","results","i","questionCount","runningResults","length","push","number","isActive","currNumber","wasAnswered","currWasAnswered","itemProps","refProp","activeItemNode","trackerNode","activeItemBoundingRect","getBoundingClientRect","trackerBoundingRect","right","scrollDiff","scrollLeft","TrackerItem","GamePane","getNextQuestionState","handleQuestionAnswered","handleTimerTick","generatorState","nextQuestion","done","questionObject","choices","createChoices","incorrectAnswers","correctAnswer","currTimer","setInterval","IDs","floor","random","slice","splice","nextId","setTimeout","newState","score","reduce","accum","currentValue","endGame","clearInterval","concat","delayedQuestionUpdate","newTime","newTimer","newResults","isMobile","window","innerWidth","quesitonTimerProps","prompt","Footer","_","href","Loader","GameModal","shouldDisplayTitle","totalQuestions","Problem","issue","message","triviaEndpoint","App","dataIsPending","error","showingTitleScreen","handleNavClick","fetchQuestions","handleEndOfGame","fetch","response","ok","Error","status","statusText","json","jsonData","questionGenerator","finalScore","gameData","questionItem","parser","DOMParser","decodedPrompt","parseFromString","documentElement","textContent","decodedAnswer","decodedIncorrectAnswers","next","content","gameIsRunning","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.957eb00b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Nav.css';\n\nconst Nav = props => (\n    <nav className=\"Nav\">\n        <p className=\"Nav__Title\">Trivia!</p>\n        <div className=\"Nav__Button\" onClick={props.onClick}>\n            <ion-icon name=\"close\"></ion-icon>\n        </div>\n    </nav>\n);\n\nNav.propTypes = {\n    onClick: PropTypes.func.isRequired\n};\n\nexport default Nav;\n","import PropTypes from 'prop-types';\nimport './Question.css';\nimport React from 'react';\n\nconst Question = props => {\n    let timerContent = null;\n    if (props.hasTimer) {\n        const paddedString = String(Math.ceil(props.timeRemaining)).padStart(2, \"0\");\n        const timerClassExpr = props.timeRemaining <= 0 ? \"Question__Timer--Incorrect\" : \"Question__Timer--Neutral\";\n        timerContent = <h1 className={timerClassExpr}>{paddedString}</h1>\n    }\n    return (\n        <div className=\"Question\">\n            <div className=\"Question__Header\">\n                <h1>Question {props.questionNumber}</h1>\n                {timerContent}\n            </div>\n            <p className=\"Question__Prompt\">{props.questionPrompt}</p>\n        </div>\n    );\n}\n\nQuestion.propTypes = {\n    questionNumber: PropTypes.number.isRequired,\n    questionPrompt: PropTypes.string.isRequired,\n    hasTimer: PropTypes.bool.isRequired,\n    allotedTime: PropTypes.number,\n    timeRemaining: PropTypes.number\n};\n\nQuestion.defaultProps = {\n    hasTimer: false\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './AnswerPane.css';\n\nclass AnswerPane extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.handleOptionChosen = this.handleOptionChosen.bind(this);\n    }\n\n    handleOptionChosen(wasCorrect) {\n        this.props.onAnswer(wasCorrect);\n    }\n\n    render() {\n        return (\n            <div className=\"AnswerPane\">\n                {this.props.choiceList.map((value, index) => (\n                    <AnswerChoice\n                        key={this.props.choiceIDs[index]}\n                        choice={value}\n                        isCorrect={index === this.props.correctIndex}\n                        shouldReveal={this.props.answered}\n                        onChosen={this.handleOptionChosen}\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nAnswerPane.propTypes = {\n    choiceList: PropTypes.arrayOf(String).isRequired,\n    choiceIDs: PropTypes.arrayOf(Number).isRequired,\n    correctIndex: PropTypes.number.isRequired,\n    onAnswer: PropTypes.func.isRequired,\n    answered: PropTypes.bool.isRequired\n};\n\nclass AnswerChoice extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { chosen: false };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        if (!this.props.shouldReveal) {\n            this.props.onChosen(this.props.isCorrect);\n            this.setState({ chosen: true });\n        }\n    }\n\n    render() {\n        const shouldReveal = this.props.shouldReveal;\n        const isCorrect = this.props.isCorrect;\n\n        let classExpr = \"AnswerPane__Choice\";\n        if (!shouldReveal) classExpr += \" AnswerPane__Choice--Enabled\";\n        if (shouldReveal && isCorrect) classExpr += \" AnswerPane__Choice--Correct\";\n        else if (shouldReveal && !isCorrect && this.state.chosen)\n            classExpr += \" AnswerPane__Choice--Incorrect\";\n\n        return (\n            <div className={classExpr} onClick={this.handleClick}>\n                <p>{this.props.choice}</p>\n            </div>\n        );\n    }\n};\n\nAnswerChoice.propTypes = {\n    choice: PropTypes.string.isRequired,\n    isCorrect: PropTypes.bool.isRequired,\n    shouldReveal: PropTypes.bool.isRequired,\n    onChosen: PropTypes.func.isRequired\n}\n\nexport default AnswerPane;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ProgressBar.css';\n\nclass ProgressBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.fillRef = React.createRef();\n    }\n\n    render() {\n        const paddedString = String(Math.ceil(this.props.timeRemaining)).padStart(2, \"0\");\n        let timerClassExpr = \"ProgressBar__Timer\";\n        if (this.props.timeRemaining <= 0) timerClassExpr += \" ProgressBar__Timer--End\";\n        return (\n            <div className=\"ProgressBar\">\n                <p className={timerClassExpr}>0:{paddedString}</p>\n                <div className=\"ProgressBar__Bar\">\n                    <div className=\"ProgressBar__Fill\" ref={this.fillRef}></div>\n                </div>\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        const fillNode = this.fillRef.current;\n        let completion = (this.props.allotedTime - this.props.timeRemaining) / this.props.allotedTime;\n        completion *= 100;\n        completion = completion.toFixed(3);\n        fillNode.setAttribute(\"style\", `width: ${completion}%`);\n    }\n}\n\nProgressBar.propTypes = {\n    allotedTime: PropTypes.number.isRequired,\n    timeRemaining: PropTypes.number.isRequired\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Tracker.css';\n\nclass Tracker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.activeItemRef = React.createRef();\n        this.trackerRef = React.createRef();\n    }\n\n    render() {\n        let results = [];\n        for (let i = 0; i < this.props.questionCount; i++) {\n            if (i >= this.props.runningResults.length) {\n                // Append default (unanswered, inactive) item state\n                results.push({\n                    number: i + 1,\n                    isActive: i + 1 === this.props.currNumber,\n                    wasAnswered: false\n                });\n            } else {\n                // Append given running item state\n                const wasAnswered = i + 1 < this.props.currNumber || \n                    (i + 1 === this.props.currNumber && this.props.currWasAnswered);\n                results.push({\n                    number: i + 1,\n                    isActive: i + 1 === this.props.currNumber,\n                    wasAnswered: wasAnswered,\n                    wasCorrect: this.props.runningResults[i]\n                });\n            }\n        }\n\n        return (\n            <aside className=\"Tracker\" ref={this.trackerRef}>\n                {results.map(itemProps => {\n                    return <TrackerItem {...itemProps} refProp={this.activeItemRef} />;\n                })}\n            </aside>\n        );\n    }\n\n    componentDidUpdate() {\n        // Scroll to the active tracker item\n        const activeItemNode = this.activeItemRef.current;\n        const trackerNode = this.trackerRef.current;\n        const activeItemBoundingRect = activeItemNode.getBoundingClientRect();\n        const trackerBoundingRect = trackerNode.getBoundingClientRect();\n        if (activeItemBoundingRect.right > trackerBoundingRect.right) {\n            const scrollDiff = activeItemBoundingRect.right - trackerBoundingRect.right;\n            trackerNode.scrollLeft += scrollDiff;\n        }\n    }\n}\n\nTracker.propTypes = {\n    currNumber: PropTypes.number.isRequired,\n    runningResults: PropTypes.arrayOf(Boolean).isRequired,\n    questionCount: PropTypes.number.isRequired,\n    currWasAnswered: PropTypes.bool.isRequired\n};\n\nconst TrackerItem = props => {\n    let classExpr = \"Tracker__Item\";\n    if (props.isActive && !props.wasAnswered) classExpr += \" Tracker__Item--Active\";\n    else if(props.wasAnswered && props.wasCorrect) classExpr += \" Tracker__Item--Correct\";\n    else if(props.wasAnswered && !props.wasCorrect) classExpr += \" Tracker__Item--Incorrect\";\n    else classExpr += \" Tracker__Item--Unvisited\";\n\n    return (\n        <div className={classExpr} ref={props.isActive? props.refProp : null}>\n            <p>Q{props.number}</p>\n            {props.isActive && <div className=\"Tracker__Tab\"></div>}\n        </div>\n    );\n};\n\nTrackerItem.propTypes = {\n    number: PropTypes.number.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    wasAnswered: PropTypes.bool.isRequired,\n    wasCorrect: PropTypes.bool,\n    refProp: PropTypes.any.isRequired\n}\n\nexport default Tracker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport './GamePane.css';\nimport Question from './Question';\nimport AnswerPane from './AnswerPane'\nimport ProgressBar from './ProgressBar';\nimport Tracker from './Tracker';\n\nconst allotedTime = 10;\n\nclass GamePane extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {runningResults: []}\n        this.getNextQuestionState = this.getNextQuestionState.bind(this);\n        this.handleQuestionAnswered = this.handleQuestionAnswered.bind(this);\n        this.handleTimerTick = this.handleTimerTick.bind(this);\n    }\n\n    getNextQuestionState() {\n        // Set timer, request and init question\n        const generatorState = this.props.nextQuestion();\n        if (generatorState.done) {\n            return null;\n        } else {\n            const questionObject = generatorState.value;\n            const choices = this.createChoices(questionObject.incorrectAnswers, questionObject.correctAnswer);\n            let newState = {\n                questionObject,\n                timeRemaining: allotedTime,\n                currTimer: setInterval(this.handleTimerTick, 16.67),   // ~60 fps\n                choiceList: choices.choiceList,\n                correctIndex: choices.correctIndex,\n                choiceIDs: choices.IDs,\n                answered: false\n            };\n            return newState;\n        }\n    }\n\n    createChoices(incorrectAnswers, correctAnswer) {\n        // Init the choices\n        let correctIndex = Math.floor(Math.random() * (incorrectAnswers.length + 1));\n        let choiceList = incorrectAnswers.slice();\n        choiceList.splice(correctIndex, 0, correctAnswer);\n        let IDs = [];\n        for (let i = 0; i < choiceList.length; i++) IDs[i] = nextId();\n        return { choiceList, correctIndex, IDs };\n    }\n\n    delayedQuestionUpdate() {\n        setTimeout(() => {\n            const newState = this.getNextQuestionState();\n            if (!newState) {\n                // Time to end the game\n                const score = this.state.runningResults.reduce((accum, currentValue) => {\n                    return currentValue ? accum + 1 : accum;\n                }, 0);\n                this.props.endGame(score);\n            } else {\n                this.setState(newState);\n            }   \n        }, 2000);\n    }\n\n    handleQuestionAnswered(wasCorrect) {\n        // Otherwise, edge case where the time has already run out\n        if (!this.state.answered) {\n            // Clear timer, update UI\n            clearInterval(this.state.currTimer);\n            this.setState({ \n                currTimer: null, \n                answered: true, \n                runningResults: this.state.runningResults.concat([wasCorrect])\n            });\n\n            // Queue up next question\n            this.delayedQuestionUpdate();\n        }\n    }\n\n    handleTimerTick() {\n        // Otherwise, edge case where the user has already answered\n        if (!this.state.answered) {\n            const newTime = this.state.timeRemaining - 0.01617;\n            let newTimer = this.state.currTimer;\n            let answered = false;\n            let newResults = this.state.runningResults;\n            if (newTime <= 0) {\n                clearInterval(this.state.currTimer);\n                newTimer = null;\n                answered = true;\n                newResults = this.state.runningResults.concat([false]);\n\n                // Queue up next question\n                this.delayedQuestionUpdate();\n            }\n            this.setState({ \n                timeRemaining: newTime, \n                currTimer: newTimer, \n                answered,\n                runningResults: newResults\n            });\n        }\n    }\n\n    componentWillMount() {\n        // Init first question\n        this.setState(this.getNextQuestionState());\n    }\n\n    render() {\n        const isMobile = window.innerWidth <= 700;\n        let quesitonTimerProps = {hasTimer: isMobile};\n        if (isMobile) {\n            quesitonTimerProps.allotedTime = allotedTime;\n            quesitonTimerProps.timeRemaining = this.state.timeRemaining;\n        }\n        return (\n            <main className=\"GamePane\">\n                <div className=\"GamePane__QA\">\n                    <Question\n                        questionNumber={this.state.questionObject.number}\n                        questionPrompt={this.state.questionObject.prompt}\n                        {...quesitonTimerProps}\n                    />\n                    <AnswerPane\n                        choiceList={this.state.choiceList}\n                        choiceIDs={this.state.choiceIDs}\n                        correctIndex={this.state.correctIndex}\n                        onAnswer={this.handleQuestionAnswered}\n                        answered={this.state.answered}\n                    />\n                    {!isMobile && <ProgressBar allotedTime={allotedTime} timeRemaining={this.state.timeRemaining} />}\n                </div>\n                <Tracker \n                    currNumber={this.state.questionObject.number} \n                    runningResults={this.state.runningResults} \n                    questionCount={this.props.questionCount} \n                    currWasAnswered={this.state.answered}\n                />\n            </main>\n        );\n    }\n\n    componentWillUnmount() {\n        // Stop any running timers\n        if (this.state.currTimer) clearInterval(this.state.currTimer);\n    }\n}\n\nGamePane.propTypes = {\n    nextQuestion: PropTypes.func.isRequired,\n    questionCount: PropTypes.number.isRequired,\n    endGame: PropTypes.func.isRequired\n};\n\nexport default GamePane;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = _ => (\n    <footer className=\"Footer\">\n        <a href=\"https://ionicons.com\">\n            <ion-icon name=\"logo-ionic\"></ion-icon>\n            <p>Icons by Ionic</p>\n        </a>\n        <a href=\"https://github.com/Deanfost/react-trivia\">\n            <ion-icon name=\"logo-github\"></ion-icon>\n            <p>View on Github</p>\n        </a>\n        <a href=\"https://opentdb.com\">\n            <ion-icon name=\"server\"></ion-icon>\n            <p>Trivia by OpenTDB</p>\n        </a>\n    </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport './Loader.css';\n\nconst Loader = _ => (\n    <div className=\"Loader\">\n        <div className=\"Loader__Spinner\">\n            <div className=\"Loader__Circle\"></div>\n            <div className=\"Loader__Row\">\n                <div className=\"Loader__Circle\"></div>\n                <div className=\"Loader__Circle\"></div>\n            </div>\n            <div className=\"Loader__Circle\"></div>\n        </div>\n        <p className=\"Loader__Message\">Loading a new game...</p>\n    </div>\n);\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './GameModal.css';\n\nconst GameModal  = props => {\n    if (props.shouldDisplayTitle) {\n        return (\n            <div className=\"GameFinished\">\n                <h1 className=\"GameFinished__Score\">Trivia!</h1>\n                <p className=\"GameFinished__Caption\">General knowledge</p>\n                <div className=\"GameFinished__Button\" onClick={props.onClick}>Start game</div>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"GameFinished\">\n                <p className=\"GameFinished__Caption\">Game finished!</p>\n                <h1 className=\"GameFinished__Score\">Your score: {props.score}/{props.totalQuestions}</h1>\n                <div className=\"GameFinished__Button\" onClick={props.onClick}>Play again</div>\n            </div>\n        );\n    }\n    \n};\n\nGameModal.propTypes = {\n    shouldDisplayTitle: PropTypes.bool.isRequired,\n    score: PropTypes.number,\n    totalQuestions: PropTypes.number,\n    onClick: PropTypes.func.isRequired\n};\n\nexport default GameModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Problem.css';\n\nconst Problem = props => (\n    <div className=\"Problem\">\n        <p className=\"Problem__Oops\">Something went wrong!</p>\n        <p className=\"Problem__Issue\">{props.issue.message}</p>\n        <div className=\"Problem__Button\" onClick={props.onClick}>Try again</div>\n    </div>\n);\n\nProblem.propTypes = {\n    issue: PropTypes.instanceOf(Error).isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nexport default Problem;\n","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport GamePane from './components/GamePane';\nimport Footer from './components/Footer';\nimport Loader from './components/Loader';\nimport GameModal from './components/GameModal';\nimport Problem from './components/Problem';\n\nconst questionCount = 10;\nconst triviaEndpoint = `https://opentdb.com/api.php?amount=${questionCount}&category=9&difficulty=easy`;\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { dataIsPending: false, error: null, showingTitleScreen: true};\n\n\t\tthis.handleNavClick = this.handleNavClick.bind(this);\n\t\tthis.fetchQuestions = this.fetchQuestions.bind(this);\n\t\tthis.nextQuestion = this.nextQuestion.bind(this);\n\t\tthis.handleEndOfGame = this.handleEndOfGame.bind(this);\n\t}\n\n\tasync fetchQuestions() {\n\t\tthis.setState({ dataIsPending: true, error: null, showingTitleScreen: false});\n\t\t// Poll the new game data\n\t\ttry {\n\t\t\tlet response = await fetch(triviaEndpoint);\n\t\t\tif (!response.ok) \n\t\t\t\tthrow new Error(`Fetch operation failed, received error code: (${response.status}) ${response.statusText}`);\n\t\t\t\n\t\t\t// Parse the data, last error checks\n\t\t\tlet jsonData = await response.json();\n\t\t\tif (jsonData[\"response_code\"] !== 0) \n\t\t\t\tthrow new Error(`API returned error code: ${jsonData[\"response_code\"]}`);\n\n\t\t\t// Bind question generator\n\t\t\tthis.setState({\n\t\t\t\tdataIsPending: false,\n\t\t\t\tquestionGenerator: this.questionGenerator(jsonData.results),\n\t\t\t\tfinalScore: null\n\t\t\t});\n\t\t\t\n\t\t} catch (error) {\n\t\t\tthis.setState({ dataIsPending: false, error})\n\t\t}\n\t}\n\n\t* questionGenerator(gameData) {\n\t\tfor (let i = 0; i < gameData.length; i++) {\n\t\t\tlet questionItem = gameData[i];\n\n\t\t\t// Parse HTML entities\n\t\t\tconst parser = new DOMParser();\n\t\t\tconst decodedPrompt = parser.parseFromString(questionItem[\"question\"], \"text/html\")\n\t\t\t\t.documentElement.textContent;\n\t\t\tconst decodedAnswer = parser.parseFromString(questionItem[\"correct_answer\"], \"text/html\")\n\t\t\t\t.documentElement.textContent;\n\t\t\tconst decodedIncorrectAnswers = questionItem[\"incorrect_answers\"].map(value => {\n\t\t\t\treturn parser.parseFromString(value, \"text/html\").documentElement.textContent;\n\t\t\t});\n\t\t\t\n\t\t\t// Package and send\n\t\t\tlet nextQuestion = {\n\t\t\t\tnumber: i + 1,\n\t\t\t\tprompt: decodedPrompt,\n\t\t\t\tcorrectAnswer: decodedAnswer,\n\t\t\t\tincorrectAnswers: decodedIncorrectAnswers\n\t\t\t};\n\t\t\tyield nextQuestion;\n\t\t};\n\t}\n\n\tnextQuestion() {\n\t\treturn this.state.questionGenerator.next();\n\t}\n\n\thandleNavClick() {\n\t\tthis.setState({showingTitleScreen: true});\n\t}\n\n\thandleEndOfGame(finalScore) {\n\t\tthis.setState({finalScore});\n\t}\t\n\n\tstatic getDerivedStateFromError(error) {\n\t\tthis.setState({error});\n\t}\n\n\trender() {\n\t\tlet content;\n\t\tlet classExpr = \"App\";\n\t\tconst gameIsRunning = !this.state.dataIsPending && \n\t\t\t!this.state.error && this.state.finalScore === null && \n\t\t\t!this.state.showingTitleScreen;\n\t\tif (this.state.showingTitleScreen) {\n\t\t\t// Title screen\n\t\t\tcontent = <GameModal \n\t\t\t\t\tshouldDisplayTitle={true}\n\t\t\t\t\tonClick={this.fetchQuestions} \n\t\t\t\t\t/>;\n\t\t\tclassExpr += \" App--Centered\";\n\t\t} else if (this.state.dataIsPending) {\n\t\t\t// Loading data\n\t\t\tcontent = <Loader />;\n\t\t\tclassExpr += \" App--Centered\";\n\t\t} else if (gameIsRunning) {\n\t\t\t// Game is running\n\t\t\tcontent = <GamePane \n\t\t\t\t\tnextQuestion={this.nextQuestion} \n\t\t\t\t\tquestionCount={questionCount} \n\t\t\t\t\tendGame={this.handleEndOfGame} \n\t\t\t\t/>;\n\t\t} else if (!this.state.dataIsPending && !this.state.error && this.state.finalScore !== null) {\n\t\t\t// Game is over\n\t\t\tcontent = <GameModal \n\t\t\t\t\tshouldDisplayTitle={false}\n\t\t\t\t\tscore={this.state.finalScore} \n\t\t\t\t\ttotalQuestions={questionCount} \n\t\t\t\t\tonClick={this.fetchQuestions} \n\t\t\t\t\t/>;\n\t\t\tclassExpr += \" App--Centered\";\n\t\t} else {\n\t\t\t// There was an issue\n\t\t\tcontent = <Problem issue={this.state.error} onClick={this.fetchQuestions} />;\n\t\t\tclassExpr += \" App--Centered\";\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={classExpr}>\n\t\t\t\t{gameIsRunning && <Nav onClick={this.handleNavClick} />}\n\t\t\t\t\t{content}\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}