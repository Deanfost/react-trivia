{"version":3,"sources":["components/Nav.js","components/Question.js","components/AnswerPane.js","components/ProgressBar.js","components/Tracker.js","components/GamePane.js","components/Footer.js","components/Loader.js","components/Problem.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","onClick","name","Question","questionNumber","questionPrompt","defaultProps","hasTimer","AnswerPane","handleOptionChosen","bind","wasCorrect","this","onAnswer","choiceList","map","value","index","key","choiceIDs","choice","isCorrect","correctIndex","shouldReveal","answered","onChosen","React","Component","AnswerChoice","state","chosen","handleClick","setState","classExpr","ProgressBar","fillRef","createRef","paddedString","String","Math","ceil","timeRemaining","padStart","timerClassExpr","ref","fillNode","current","completion","allotedTime","toFixed","setAttribute","Tracker","results","i","questionCount","runningResults","length","push","number","isActive","currNumber","wasAnswered","currWasAnswered","itemProps","TrackerItem","GamePane","getNextQuestionState","handleQuestionAnswered","handleTimerTick","questionObject","nextQuestion","choices","createChoices","incorrectAnswers","correctAnswer","currTimer","setInterval","IDs","floor","random","slice","splice","nextId","setTimeout","clearInterval","concat","delayedQuestionUpdate","newTime","newTimer","newResults","prompt","Footer","_","href","Loader","Problem","issue","message","App","pending","error","handleNavClick","fetchQuestions","fetch","response","ok","json","jsonData","questionGenerator","Error","status","gameData","questionItem","question","next","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ab242fe5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Nav.css';\n\nconst Nav = props =>\n    (\n        <nav className=\"Nav\">\n            <p className=\"Nav__Title\">Trivia!</p>\n            <div className=\"Nav__Button\" onClick={props.onClick}>\n                <ion-icon name=\"refresh\"></ion-icon>\n            </div>\n        </nav>\n    );\n\nNav.propTypes = {\n    onClick: PropTypes.func.isRequired\n};\n\nexport default Nav;","import PropTypes from 'prop-types';\nimport './Question.css';\nimport React from 'react';\n\nconst Question = props => (\n    <div className=\"Question\">\n        <h1 className=\"Question__Header\">Question {props.questionNumber}</h1>\n        <p className=\"Question__Prompt\">{props.questionPrompt}</p>\n    </div>\n);\n\nQuestion.propTypes = {\n    questionNumber: PropTypes.number.isRequired,\n    questionPrompt: PropTypes.string.isRequired,\n    hasTimer: PropTypes.bool.isRequired,\n    allotedTime: PropTypes.number,\n    timeRemaining: PropTypes.number\n};\n\nQuestion.defaultProps = {\n    hasTimer: false\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './AnswerPane.css';\n\nclass AnswerPane extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.handleOptionChosen = this.handleOptionChosen.bind(this);\n    }\n\n    handleOptionChosen(wasCorrect) {\n        this.props.onAnswer(wasCorrect);\n    }\n\n    render() {\n        return (\n            <div className=\"AnswerPane\">\n                {this.props.choiceList.map((value, index) => (\n                    <AnswerChoice\n                        key={this.props.choiceIDs[index]}\n                        choice={value}\n                        isCorrect={index === this.props.correctIndex}\n                        shouldReveal={this.props.answered}\n                        onChosen={this.handleOptionChosen}\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nAnswerPane.propTypes = {\n    choiceList: PropTypes.arrayOf(String).isRequired,\n    choiceIDs: PropTypes.arrayOf(Number).isRequired,\n    correctIndex: PropTypes.number.isRequired,\n    onAnswer: PropTypes.func.isRequired,\n    answered: PropTypes.bool.isRequired\n};\n\nclass AnswerChoice extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { chosen: false };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        if (!this.props.shouldReveal) {\n            this.props.onChosen(this.props.isCorrect);\n            this.setState({ chosen: true });\n        }\n    }\n\n    render() {\n        const shouldReveal = this.props.shouldReveal;\n        const isCorrect = this.props.isCorrect;\n\n        let classExpr = \"AnswerPane__Choice\";\n        if (!shouldReveal) classExpr += \" AnswerPane__Choice--Enabled\";\n        if (shouldReveal && isCorrect) classExpr += \" AnswerPane__Choice--Correct\";\n        else if (shouldReveal && !isCorrect && this.state.chosen)\n            classExpr += \" AnswerPane__Choice--Incorrect\";\n\n        return (\n            <div className={classExpr} onClick={this.handleClick}>\n                <p>{this.props.choice}</p>\n            </div>\n        );\n    }\n};\n\nAnswerChoice.propTypes = {\n    choice: PropTypes.string.isRequired,\n    isCorrect: PropTypes.bool.isRequired,\n    shouldReveal: PropTypes.bool.isRequired,\n    onChosen: PropTypes.func.isRequired\n}\n\nexport default AnswerPane;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ProgressBar.css';\n\nclass ProgressBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.fillRef = React.createRef();\n    }\n\n    render() {\n        const paddedString = String(Math.ceil(this.props.timeRemaining)).padStart(2, \"0\");\n        let timerClassExpr = \"ProgressBar__Timer\";\n        if (this.props.timeRemaining <= 0) timerClassExpr += \" ProgressBar__Timer--End\";\n        return (\n            <div className=\"ProgressBar\">\n                <p className={timerClassExpr}>0:{paddedString}</p>\n                <div className=\"ProgressBar__Bar\">\n                    <div className=\"ProgressBar__Fill\" ref={this.fillRef}></div>\n                </div>\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        const fillNode = this.fillRef.current;\n        let completion = (this.props.allotedTime - this.props.timeRemaining) / this.props.allotedTime;\n        completion *= 100;\n        completion = completion.toFixed(3);\n        fillNode.setAttribute(\"style\", `width: ${completion}%`);\n    }\n}\n\nProgressBar.propTypes = {\n    allotedTime: PropTypes.number.isRequired,\n    timeRemaining: PropTypes.number.isRequired\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Tracker.css';\n\nclass Tracker extends React.Component {\n    render() {\n        let results = [];\n        for (let i = 0; i < this.props.questionCount; i++) {\n            if (i >= this.props.runningResults.length) {\n                // Append default (unanswered, inactive) item state\n                results.push({\n                    number: i + 1,\n                    isActive: i + 1 === this.props.currNumber,\n                    wasAnswered: false\n                });\n            } else {\n                // Append given running item state\n                const wasAnswered = i + 1 < this.props.currNumber || \n                    (i + 1 === this.props.currNumber && this.props.currWasAnswered);\n                results.push({\n                    number: i + 1,\n                    isActive: i + 1 === this.props.currNumber,\n                    wasAnswered: wasAnswered,\n                    wasCorrect: this.props.runningResults[i]\n                });\n            }\n        }\n\n        return (\n            <aside className=\"Tracker\">\n                {results.map(itemProps => <TrackerItem {...itemProps} />)}\n            </aside>\n        );\n    }\n}\n\nTracker.propTypes = {\n    currNumber: PropTypes.number.isRequired,\n    runningResults: PropTypes.arrayOf(Boolean).isRequired,\n    questionCount: PropTypes.number.isRequired,\n    currWasAnswered: PropTypes.bool.isRequired\n};\n\nconst TrackerItem = props => {\n    let classExpr = \"Tracker__Item\";\n    if (props.isActive && !props.wasAnswered) classExpr += \" Tracker__Item--Active\";\n    else if(props.wasAnswered && props.wasCorrect) classExpr += \" Tracker__Item--Correct\";\n    else if(props.wasAnswered && !props.wasCorrect) classExpr += \" Tracker__Item--Incorrect\";\n    else classExpr += \" Tracker__Item--Unvisited\";\n\n    return (\n        <div className={classExpr}>\n            <p>Q{props.number}</p>\n            {props.isActive && <div className=\"Tracker__Tab\"></div>}\n        </div>\n    );\n};\n\nTrackerItem.propTypes = {\n    number: PropTypes.number.isRequired,\n    isActive: PropTypes.bool.isRequired,\n    wasAnswered: PropTypes.bool.isRequired,\n    wasCorrect: PropTypes.bool\n}\n\nexport default Tracker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport nextId from 'react-id-generator';\nimport './GamePane.css';\nimport Question from './Question';\nimport AnswerPane from './AnswerPane'\nimport ProgressBar from './ProgressBar';\nimport Tracker from './Tracker';\n\nconst allotedTime = 10;\n\nclass GamePane extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {runningResults: []}\n        this.getNextQuestionState = this.getNextQuestionState.bind(this);\n        this.handleQuestionAnswered = this.handleQuestionAnswered.bind(this);\n        this.handleTimerTick = this.handleTimerTick.bind(this);\n    }\n\n    getNextQuestionState() {\n        // Set timer, request and init question\n        const questionObject = this.props.nextQuestion();\n        const choices = this.createChoices(questionObject.incorrectAnswers, questionObject.correctAnswer);\n        let newState = {\n            questionObject,\n            timeRemaining: allotedTime,\n            currTimer: setInterval(this.handleTimerTick, 16.67),   // ~60 fps\n            choiceList: choices.choiceList,\n            correctIndex: choices.correctIndex,\n            choiceIDs: choices.IDs,\n            answered: false\n        };\n        return newState;\n    }\n\n    createChoices(incorrectAnswers, correctAnswer) {\n        // Init the choices\n        let correctIndex = Math.floor(Math.random() * (incorrectAnswers.length + 1));\n        let choiceList = incorrectAnswers.slice();\n        choiceList.splice(correctIndex, 0, correctAnswer);\n        let IDs = [];\n        for (let i = 0; i < choiceList.length; i++) IDs[i] = nextId();\n        return { choiceList, correctIndex, IDs };\n    }\n\n    delayedQuestionUpdate() {\n        setTimeout(() => {\n            this.setState(this.getNextQuestionState());\n        }, 2000);\n    }\n\n    handleQuestionAnswered(wasCorrect) {\n        // Otherwise, edge case where the time has already run out\n        if (!this.state.answered) {\n            // Clear timer, update UI\n            clearInterval(this.state.currTimer);\n            this.setState({ \n                currTimer: null, \n                answered: true, \n                runningResults: this.state.runningResults.concat([wasCorrect])\n            });\n\n            // Queue up next question\n            this.delayedQuestionUpdate();\n        }\n    }\n\n    handleTimerTick() {\n        // Otherwise, edge case where the user has already answered\n        if (!this.state.answered) {\n            const newTime = this.state.timeRemaining - 0.01617;\n            let newTimer = this.state.currTimer;\n            let answered = false;\n            let newResults = this.state.runningResults;\n            if (newTime <= 0) {\n                clearInterval(this.state.currTimer);\n                newTimer = null;\n                answered = true;\n                newResults = this.state.runningResults.concat([false]);\n\n                // Queue up next question\n                this.delayedQuestionUpdate();\n            }\n            this.setState({ \n                timeRemaining: newTime, \n                currTimer: newTimer, \n                answered,\n                runningResults: newResults\n            });\n        }\n    }\n\n    componentWillMount() {\n        // Init first question\n        this.setState(this.getNextQuestionState());\n    }\n\n    render() {\n        return (\n            <main className=\"GamePane\">\n                <div className=\"GamePane__QA\">\n                    <Question\n                        questionNumber={this.state.questionObject.number}\n                        questionPrompt={this.state.questionObject.prompt}\n                    />\n                    <AnswerPane\n                        choiceList={this.state.choiceList}\n                        choiceIDs={this.state.choiceIDs}\n                        correctIndex={this.state.correctIndex}\n                        onAnswer={this.handleQuestionAnswered}\n                        answered={this.state.answered}\n                    />\n                    <ProgressBar allotedTime={allotedTime} timeRemaining={this.state.timeRemaining} />\n                </div>\n                <Tracker \n                    currNumber={this.state.questionObject.number} \n                    runningResults={this.state.runningResults} \n                    questionCount={this.props.questionCount} \n                    currWasAnswered={this.state.answered}\n                />\n            </main>\n        );\n    }\n\n    componentWillUnmount() {\n        // Stop any running timers\n        if (this.state.currTimer) clearInterval(this.state.currTimer);\n    }\n}\n\nGamePane.propTypes = {\n    nextQuestion: PropTypes.func.isRequired,\n    questionCount: PropTypes.number.isRequired\n};\n\nexport default GamePane;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = _ => (\n    <footer className=\"Footer\">\n        <a href=\"https://github.com/Deanfost/react-trivia\">\n            <ion-icon name=\"logo-github\"></ion-icon>\n            <p>View on Github</p>\n        </a>\n        <a href=\"https://ionicons.com\">\n            <ion-icon name=\"logo-github\"></ion-icon>\n            <p>Icons by Ionic</p>\n        </a>\n    </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport './Loader.css';\n\nconst Loader = _ => (\n    <div className=\"Loader\">\n        <div className=\"Loader__Spinner\">\n            <div className=\"Loader__Circle\"></div>\n            <div className=\"Loader__Row\">\n                <div className=\"Loader__Circle\"></div>\n                <div className=\"Loader__Circle\"></div>\n            </div>\n            <div className=\"Loader__Circle\"></div>\n        </div>\n        <p className=\"Loader__Message\">Loading a new game...</p>\n    </div>\n);\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Problem.css';\n\nconst Problem = props => (\n    <div className=\"Problem\">\n        <p className=\"Problem__Oops\">Something went wrong!</p>\n        <p className=\"Problem__Issue\">{props.issue.message}</p>\n        <div className=\"Problem__Button\" onClick={props.onClick}>Try again</div>\n    </div>\n);\n\nProblem.propTypes = {\n    issue: PropTypes.instanceOf(Error).isRequired,\n    onClick: PropTypes.func.isRequired\n};\n\nexport default Problem;\n","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport GamePane from './components/GamePane';\nimport Footer from './components/Footer';\nimport Loader from './components/Loader';\nimport Problem from './components/Problem';\n\nconst triviaEndpoint = 'https://opentdb.com/api.php?amount=10&category=9&difficulty=easy';\nconst questionCount = 10;\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { pending: true, error: null };\n\n\t\tthis.handleNavClick = this.handleNavClick.bind(this);\n\t\tthis.fetchQuestions = this.fetchQuestions.bind(this);\n\t\tthis.nextQuestion = this.nextQuestion.bind(this);\n\t}\n\n\tasync fetchQuestions() {\n\t\tthis.setState({ pending: true, error: null });\n\t\t// Poll the new game data\n\t\ttry {\n\t\t\tlet response = await fetch(triviaEndpoint);\n\t\t\tif (response.ok) {\n\t\t\t\t// Parse the data, attach and init a question generator\n\t\t\t\tlet jsonData = await response.json();\n\t\t\t\tthis.setState({\n\t\t\t\t\tpending: false,\n\t\t\t\t\tquestionGenerator: this.questionGenerator(jsonData.results)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Fetch operation failed, received error code: ${response.status}`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState({ pending: false, error})\n\t\t}\n\t}\n\n\t* questionGenerator(gameData) {\n\t\tfor (let i = 0; i < gameData.length; i++) {\n\t\t\tlet questionItem = gameData[i];\n\t\t\tlet nextQuestion = {\n\t\t\t\tnumber: i + 1,\n\t\t\t\tprompt: questionItem.question,\n\t\t\t\tcorrectAnswer: questionItem[\"correct_answer\"],\n\t\t\t\tincorrectAnswers: questionItem[\"incorrect_answers\"]\n\t\t\t};\n\t\t\tyield nextQuestion;\n\t\t};\n\t}\n\n\thandleNavClick() {\n\t\tthis.fetchQuestions();\n\t}\n\n\tnextQuestion() {\n\t\treturn this.state.questionGenerator.next().value;\n\t}\n\n\tstatic getDerivedStateFromError(error) {\n\t\tthis.setState({error});\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.fetchQuestions();\n\t}\n\n\trender() {\n\t\tlet content;\n\t\tlet classExpr = \"App\";\n\t\tif (!this.state.pending && !this.state.error) {\n\t\t\tcontent = <GamePane nextQuestion={this.nextQuestion} questionCount={questionCount} />;\n\t\t} else if (this.state.pending) {\n\t\t\tcontent = <Loader />;\n\t\t\tclassExpr += \" App--Centered\";\n\t\t} else {\n\t\t\tcontent = <Problem issue={this.state.error} onClick={this.fetchQuestions} />;\n\t\t\tclassExpr += \" App--Centered\";\n\t\t}\n\n\t\treturn (\n\t\t\t<div className={classExpr}>\n\t\t\t\t<Nav onClick={this.handleNavClick} />\n\t\t\t\t\t{content}\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}